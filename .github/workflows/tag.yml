
name: Create Tag

on:
  workflow_dispatch:
    inputs:
      bump:
        description: "Version bump type"
        required: true
        default: patch
        type: choice
        options: [patch, minor, major]
      message:
        description: "Tag/Release message"
        required: false
        default: "Automated release"

jobs:
  tag:
    runs-on: ubuntu-latest
    permissions:
      contents: write   # needed to push tags & create releases
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # we need tags

      - name: Determine next version
        id: ver
        shell: bash
        run: |
          set -euo pipefail

          BUMP="${{ github.event.inputs.bump }}"
          MSG="${{ github.event.inputs.message }}"

          # Find latest v.* tag, default to v.0.0.0 if none
          LATEST="$(git tag -l 'v.*' | sort -V | tail -n1)"
          if [[ -z "$LATEST" ]]; then
            LATEST="v.0.0.0"
          fi

          echo "Latest tag: $LATEST"

          # Extract A.B.C from v.A.B.C (with literal dots)
          if [[ "$LATEST" =~ ^v\.([0-9]+)\.([0-9]+)\.([0-9]+)$ ]]; then
            MAJOR="${BASH_REMATCH[1]}"
            MINOR="${BASH_REMATCH[2]}"
            PATCH="${BASH_REMATCH[3]}"
          else
            echo "Latest tag '$LATEST' not in form v.X.Y.Z" >&2
            exit 1
          fi

          next_patch () {
            if [[ "$PATCH" -ge 9 ]]; then
              PATCH=0
              MINOR=$((MINOR+1))
            else
              PATCH=$((PATCH+1))
            fi
          }

          case "$BUMP" in
            patch)
              next_patch
              ;;
            minor)
              MINOR=$((MINOR+1))
              PATCH=0
              ;;
            major)
              MAJOR=$((MAJOR+1))
              MINOR=0
              PATCH=0
              ;;
            *)
              echo "Unknown bump '$BUMP'" >&2
              exit 1
              ;;
          esac

          NEW_TAG="v.${MAJOR}.${MINOR}.${PATCH}"
          echo "New tag: $NEW_TAG"

          echo "new_tag=$NEW_TAG" >> "$GITHUB_OUTPUT"
          echo "message=$MSG" >> "$GITHUB_OUTPUT"

      - name: Create and push tag
        env:
          NEW_TAG: ${{ steps.ver.outputs.new_tag }}
          MSG: ${{ steps.ver.outputs.message }}
        shell: bash
        run: |
          set -euo pipefail
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Annotated tag for the version
          git tag -a "$NEW_TAG" -m "$MSG"
          git push origin "refs/tags/$NEW_TAG"

          # Move 'latest' tag to this commit
          git tag -fa latest -m "Latest release"
          git push -f origin "refs/tags/latest"

          echo "Tagged $NEW_TAG and moved 'latest'."

      - name: Create GitHub Release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ steps.ver.outputs.new_tag }}
          release_name: ${{ steps.ver.outputs.new_tag }}
          body: ${{ steps.ver.outputs.message }}
          draft: false
          prerelease: false
