package usecase

import (
	"bytes"
	"fmt"
	"os"
	"path/filepath"
	"strings"

	"github.com/AndreeJait/ntaps/internal/util"
)

func createDTO(dir, pkg, method string, withParam, withResp bool) error {
	path := filepath.Join(dir, "dto.go")

	var b bytes.Buffer
	b.WriteString("package " + pkg + "\n\n")
	if withParam {
		b.WriteString(fmt.Sprintf("type %sRequest struct {\n\t// TODO: define fields\n}\n\n", method))
	}
	if withResp {
		b.WriteString(fmt.Sprintf("type %sResponse struct {\n\t// TODO: define fields\n}\n\n", method))
	}
	return util.WriteGoFile(path, b.String())
}

func ensureDTO(dir, pkg, method string, withParam, withResp bool) error {
	path := filepath.Join(dir, "dto.go")

	if _, err := os.Stat(path); os.IsNotExist(err) {
		return createDTO(dir, pkg, method, withParam, withResp)
	}

	raw, err := os.ReadFile(path)
	if err != nil {
		return err
	}
	out := string(raw)

	if withParam && !strings.Contains(out, "type "+method+"Request struct") {
		out += fmt.Sprintf("\n// %sRequest generated by ntaps\ntype %sRequest struct {\n\t// TODO: define fields\n}\n", method, method)
	}
	if withResp && !strings.Contains(out, "type "+method+"Response struct") {
		out += fmt.Sprintf("\n// %sResponse generated by ntaps\ntype %sResponse struct {\n\t// TODO: define fields\n}\n", method, method)
	}
	return util.WriteGoFile(path, out)
}
